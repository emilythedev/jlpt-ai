/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RevisionRouteImport } from './routes/revision'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GrammarIndexRouteImport } from './routes/grammar/index'
import { Route as GrammarLevelRouteImport } from './routes/grammar/$level'

const RevisionRoute = RevisionRouteImport.update({
  id: '/revision',
  path: '/revision',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarIndexRoute = GrammarIndexRouteImport.update({
  id: '/grammar/',
  path: '/grammar/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarLevelRoute = GrammarLevelRouteImport.update({
  id: '/grammar/$level',
  path: '/grammar/$level',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/revision': typeof RevisionRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar': typeof GrammarIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/revision': typeof RevisionRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar': typeof GrammarIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/revision': typeof RevisionRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar/': typeof GrammarIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/revision' | '/grammar/$level' | '/grammar'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/revision' | '/grammar/$level' | '/grammar'
  id: '__root__' | '/' | '/revision' | '/grammar/$level' | '/grammar/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RevisionRoute: typeof RevisionRoute
  GrammarLevelRoute: typeof GrammarLevelRoute
  GrammarIndexRoute: typeof GrammarIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/revision': {
      id: '/revision'
      path: '/revision'
      fullPath: '/revision'
      preLoaderRoute: typeof RevisionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/': {
      id: '/grammar/'
      path: '/grammar'
      fullPath: '/grammar'
      preLoaderRoute: typeof GrammarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/$level': {
      id: '/grammar/$level'
      path: '/grammar/$level'
      fullPath: '/grammar/$level'
      preLoaderRoute: typeof GrammarLevelRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RevisionRoute: RevisionRoute,
  GrammarLevelRoute: GrammarLevelRoute,
  GrammarIndexRoute: GrammarIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
