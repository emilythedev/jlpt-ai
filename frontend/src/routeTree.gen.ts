/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RevisionIndexRouteImport } from './routes/revision/index'
import { Route as GrammarIndexRouteImport } from './routes/grammar/index'
import { Route as GrammarLevelRouteImport } from './routes/grammar/$level'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RevisionIndexRoute = RevisionIndexRouteImport.update({
  id: '/revision/',
  path: '/revision/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarIndexRoute = GrammarIndexRouteImport.update({
  id: '/grammar/',
  path: '/grammar/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarLevelRoute = GrammarLevelRouteImport.update({
  id: '/grammar/$level',
  path: '/grammar/$level',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar': typeof GrammarIndexRoute
  '/revision': typeof RevisionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar': typeof GrammarIndexRoute
  '/revision': typeof RevisionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/grammar/$level': typeof GrammarLevelRoute
  '/grammar/': typeof GrammarIndexRoute
  '/revision/': typeof RevisionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/grammar/$level' | '/grammar' | '/revision'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/grammar/$level' | '/grammar' | '/revision'
  id: '__root__' | '/' | '/grammar/$level' | '/grammar/' | '/revision/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GrammarLevelRoute: typeof GrammarLevelRoute
  GrammarIndexRoute: typeof GrammarIndexRoute
  RevisionIndexRoute: typeof RevisionIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/revision/': {
      id: '/revision/'
      path: '/revision'
      fullPath: '/revision'
      preLoaderRoute: typeof RevisionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/': {
      id: '/grammar/'
      path: '/grammar'
      fullPath: '/grammar'
      preLoaderRoute: typeof GrammarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/$level': {
      id: '/grammar/$level'
      path: '/grammar/$level'
      fullPath: '/grammar/$level'
      preLoaderRoute: typeof GrammarLevelRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GrammarLevelRoute: GrammarLevelRoute,
  GrammarIndexRoute: GrammarIndexRoute,
  RevisionIndexRoute: RevisionIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
