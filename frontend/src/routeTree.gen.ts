/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RevisionIndexRouteImport } from './routes/revision/index'
import { Route as GrammarIndexRouteImport } from './routes/grammar/index'
import { Route as GrammarLevelIndexRouteImport } from './routes/grammar/$level/index'
import { Route as GrammarLevelResultRouteImport } from './routes/grammar/$level/result'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RevisionIndexRoute = RevisionIndexRouteImport.update({
  id: '/revision/',
  path: '/revision/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarIndexRoute = GrammarIndexRouteImport.update({
  id: '/grammar/',
  path: '/grammar/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarLevelIndexRoute = GrammarLevelIndexRouteImport.update({
  id: '/grammar/$level/',
  path: '/grammar/$level/',
  getParentRoute: () => rootRouteImport,
} as any)
const GrammarLevelResultRoute = GrammarLevelResultRouteImport.update({
  id: '/grammar/$level/result',
  path: '/grammar/$level/result',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/grammar': typeof GrammarIndexRoute
  '/revision': typeof RevisionIndexRoute
  '/grammar/$level/result': typeof GrammarLevelResultRoute
  '/grammar/$level': typeof GrammarLevelIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/grammar': typeof GrammarIndexRoute
  '/revision': typeof RevisionIndexRoute
  '/grammar/$level/result': typeof GrammarLevelResultRoute
  '/grammar/$level': typeof GrammarLevelIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/grammar/': typeof GrammarIndexRoute
  '/revision/': typeof RevisionIndexRoute
  '/grammar/$level/result': typeof GrammarLevelResultRoute
  '/grammar/$level/': typeof GrammarLevelIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/grammar'
    | '/revision'
    | '/grammar/$level/result'
    | '/grammar/$level'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/grammar'
    | '/revision'
    | '/grammar/$level/result'
    | '/grammar/$level'
  id:
    | '__root__'
    | '/'
    | '/grammar/'
    | '/revision/'
    | '/grammar/$level/result'
    | '/grammar/$level/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GrammarIndexRoute: typeof GrammarIndexRoute
  RevisionIndexRoute: typeof RevisionIndexRoute
  GrammarLevelResultRoute: typeof GrammarLevelResultRoute
  GrammarLevelIndexRoute: typeof GrammarLevelIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/revision/': {
      id: '/revision/'
      path: '/revision'
      fullPath: '/revision'
      preLoaderRoute: typeof RevisionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/': {
      id: '/grammar/'
      path: '/grammar'
      fullPath: '/grammar'
      preLoaderRoute: typeof GrammarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/$level/': {
      id: '/grammar/$level/'
      path: '/grammar/$level'
      fullPath: '/grammar/$level'
      preLoaderRoute: typeof GrammarLevelIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grammar/$level/result': {
      id: '/grammar/$level/result'
      path: '/grammar/$level/result'
      fullPath: '/grammar/$level/result'
      preLoaderRoute: typeof GrammarLevelResultRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GrammarIndexRoute: GrammarIndexRoute,
  RevisionIndexRoute: RevisionIndexRoute,
  GrammarLevelResultRoute: GrammarLevelResultRoute,
  GrammarLevelIndexRoute: GrammarLevelIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
